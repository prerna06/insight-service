AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Insight-Service-Deployment-Descriptor

Parameters:
  Stage:
    Type: String
    Description: Stage name to deploy resources to
    AllowedValues:
      - dev
      - prod

Globals:
  Function:
    Runtime: java11
    MemorySize: 1024
    Timeout: 20
    AutoPublishAlias: !Ref Stage
    Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker
    CodeUri: ./application
    Tags:
      Stage: !Ref Stage
      Service: Course
      Resource: Lambda
    Environment:
      Variables:
        TABLE: !Ref CourseTable
        APPLICATION_ENVIRONMENT: !Ref Stage
        CLOUD_REGION: us-east-1
        MAIN_CLASS: com.tekcapsule.insights.application.InsightsApplication
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1

Resources:

  # Setup API Gateway

  NewsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "course-${Stage}"
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'X-Forwarded-For, Content-Type, Authorization, X-User-Login, X-Channel-Code'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false
      Variables:
        LAMBDA_ALIAS: !Ref Stage

  StocksApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "course-${Stage}"
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'X-Forwarded-For, Content-Type, Authorization, X-User-Login, X-Channel-Code'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false
      Variables:
        LAMBDA_ALIAS: !Ref Stage

  # Setup DynamoDB Table

  InsightsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Stage}Insights"
      AttributeDefinitions:
        - AttributeName: insightsId
          AttributeType: S
        - AttributeName: region
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: insightsId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: newsGSI
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: title
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

        - IndexName: stocksGSI
          KeySchema:
            - AttributeName: region
              KeyType: HASH
            - AttributeName: orgName
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

  # Setup Lambda Functions

  CreateNewsFeedsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-Course-CreateNews"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "InsightsTable"
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: createNewsFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: news/create
            Method: post
            RestApiId:
              Ref: NewsApi

  UpdateNewsFeedsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-Course-UpdateNews"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "InsightsTable"
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: updateNewsFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: news/update
            Method: post
            RestApiId:
              Ref: NewsApi

  GetNewsFeedsByTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-Course-GetNewsByType"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "InsightsTable"
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: getNewsFeedsFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: news/get
            Method: post
            RestApiId:
              Ref: NewsApi

  CreateStocksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-Course-CreateStocks"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "InsightsTable"
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: createStockFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: stocks/create
            Method: post
            RestApiId:
              Ref: StocksApi

  UpdateStocksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-Course-UpdateStocks"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "InsightsTable"
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: updateStockFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: stocks/update
            Method: post
            RestApiId:
              Ref: StocksApi

  GetStocksByRegionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-Course-GetStocksByRegion"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "InsightsTable"
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: getStocksFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: stocks/get
            Method: post
            RestApiId:
              Ref: StocksApi


  # Set Output Variable

Outputs:
  StocksApiEndpoint:
    Description: "Stocks API endpoint."
    Value: !Sub "https://${StocksApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/stocks"

  NewsApiEndpoint:
    Description: "News API endpoint."
    Value: !Sub "https://${NewsApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/news"
